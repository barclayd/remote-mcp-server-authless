import { z } from 'zod';
import { nullishObject } from './utils';

const MoveItemSchema = nullishObject({
  item_id: z.number(),
  user_id: z.number(),
  parent_item_id: z.number(),
  category_id: z.number(),
  name: z.string(),
  identifier: z.string(),
  locale: z.string(),
  make_id: z.number(),
  make_name: z.string(),
  model_id: z.number(),
  model_name: z.string(),
  image_path: z.string(),
  width: z.number(),
  depth: z.number(),
  height: z.number(),
  weight: z.number(),
  original_width: z.number(),
  original_depth: z.number(),
  original_height: z.number(),
  original_weight: z.number(),
  dimension_unit: z.string(),
  weight_unit: z.string(),
  volume: z.number(),
  is_admin: z.boolean(),
  is_complete: z.boolean(),
  location_id: z.number(),
  loading_time: z.number(),
  fake_id: z.string(),
  quantity: z.number(),
});

const AddressDataSchema = nullishObject({
  ISO_3166_1_Alpha_2: z.string(),
  country: z.string(),
  latitude: z.number(),
  longitude: z.number(),
  lookup: z.string(),
  name: z.string(),
  phone_number: z.string(),
  postcode: z.string(),
  town: z.string(),
  region: z.string(),
});

const UserInfoSchema = nullishObject({
  email: z.string(),
  phone_number: z.string(),
  full_name: z.string(),
});

const PriceCategoriesSchema = nullishObject({
  c: nullishObject({
    '2': z.number(),
  }),
});

const TimeOptionSchema = nullishObject({
  from: z.string(),
  to: z.string(),
  s: PriceCategoriesSchema,
  sp: PriceCategoriesSchema,
  p: PriceCategoriesSchema,
});

const DayPriceSchema = nullishObject({
  s: PriceCategoriesSchema,
  sp: PriceCategoriesSchema,
  p: PriceCategoriesSchema,
  f: z.array(z.unknown()),
  o: z.record(z.string(), TimeOptionSchema),
  r: nullishObject({
    count: z.number(),
    type: z.string(),
  }),
});

const PricesSchema = z.record(z.string(), DayPriceSchema);

const CartItemSchema = nullishObject({
  service_id: z.number(),
  type: z.string(),
  base_price: z.number().optional(),
  unit_price: z.number().optional(),
  rate_price: z.number().optional(),
  min_price: z.number().optional(),
  excess: z.number().optional(),
  excess_rate: z.number().optional(),
  cover: z.number().optional(),
  international_cover: z.number().optional(),
  international_rate_price: z.number().optional(),
  international_min_price: z.number().optional(),
  international_excess: z.number().optional(),
  international_excess_rate: z.number().optional(),
  international_available: z.number().optional(),
  limit: z.number().optional(),
  inc_tax: z.number().optional(),
  units: z.string().optional(),
  tax_rate: z.number().optional(),
  tax_type: z.number().optional(),
  icon: z.string().optional(),
  order: z.number().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  visible_for_admin: z.number().optional(),
  visible_for_customer: z.number().optional(),
  visible_for_provider: z.number().optional(),
  customer_can_add: z.number().optional(),
  fee_numerator: z.number().optional(),
  fee_denominator: z.number().optional(),
  cutoff_time: z.number().optional(),
  locale: z.string().optional(),
  version: z.string().optional(),
  basedOnValueOfGoods: z.boolean().optional(),
  category_service_id: z.number().optional(),
  category_id: z.number().optional(),
  amount: z.number(),
  qty: z.number().optional(),
});

const PaymentGatewayOptionSchema = nullishObject({
  default: z.boolean(),
  paymentAction: z.string().optional(),
  isCheckoutDisabledInModal: z.boolean().optional(),
  riskSettings: z
    .object({
      avs: z.boolean(),
      reasons: z
        .object({
          pickupInThreeDays: z.boolean(),
        })
        .optional(),
    })
    .optional(),
});

const AvailablePaymentGatewaysSchema = nullishObject({
  adyen_card: PaymentGatewayOptionSchema,
  adyen_web_sdk: PaymentGatewayOptionSchema,
  braintree: PaymentGatewayOptionSchema,
  credit: PaymentGatewayOptionSchema,
  checkout_card: PaymentGatewayOptionSchema,
  pgs_stripe: PaymentGatewayOptionSchema,
});

const LowestPriceSchema = nullishObject({
  standard: z.number(),
  premium: z.number(),
});

const PricesKeysSchema = nullishObject({
  admin: z.string(),
  standard: z.string(),
  standard_plus: z.string(),
  premium: z.string(),
  flexible: z.string(),
  options: z.string(),
  options_delivery: z.string(),
  customer: z.string(),
  provider: z.string(),
  routes: z.string(),
});

const ListingSchema = nullishObject({
  stage: z.number(),
  toStage: z.number(),
  v: z.number(),
  pickup_date: z.string(),
  admin_pickup_date: z.string(),
  admin_pickup_date_end: z.string(),
  admin_delivery_date: z.string(),
  admin_delivery_date_end: z.string(),
  category_id: z.number(),
  move_items: z.array(MoveItemSchema),
  pickup_address_data: AddressDataSchema,
  from: z.string(),
  delivery_address_data: AddressDataSchema,
  to: z.string(),
  user_info: UserInfoSchema,
  vehicle_is_operational: z.boolean(),
  origin_property_level: z.string(),
  destination_property_level: z.string(),
  prices: PricesSchema,
  pickup_time: z.string(),
  pickup_time_end: z.string(),
  men_required: z.number(),
  saverOption: z.boolean(),
  owner: z.string(),
  job_is_for_business: z.boolean(),
  landing_id: z.string(),
  price_option: z.string(),
  quotes_to: z.string(),
  selected_van: z.string(),
  hours_selected: z.number(),
  selectedTimeOption: z.string(),
  selectedTimeOptionType: z.string(),
  packageType: z.string(),
  pre_listing_id: z.number(),
  human_id: z.string(),
  listing_id: z.number(),
  pre_listing_url: z.string(),
  jump_to_stage: z.number(),
  categoryIdent: z.string(),
  has_ferry: z.boolean(),
  is_international: z.boolean(),
  is_in_congestion_zone: z.boolean(),
  classification_target: z.string(),
  is_instant_pricing: z.number(),
  delivery_date_option: z.string(),
  pickup_date_option: z.string(),
  delivery_date_end: z.string(),
  pickup_date_end: z.string(),
  delivery_date: z.string(),
  delivery_time_end: z.string(),
  delivery_time: z.string(),
  total_price: z.number(),
  force_jump_to: z.number(),
  men_option_available: z.array(z.number()),
  lowest_price: LowestPriceSchema,
  distance: z.number(),
  duration: z.number(),
  listing_cart: z.array(CartItemSchema),
  fields: z.unknown(),
  special_instruction: z.string(),
  ranged_offset_future: z.number(),
  ranged_offset_past: z.number(),
  refund_id: z.number(),
  is_featured: z.boolean(),
  listingVatPlan: z.unknown(),
  listingAvailablePaymentGateways: AvailablePaymentGatewaysSchema,
  route_summary: z.string(),
  rendered_route_summary: z.string(),
  route_locked: z.boolean(),
  rendered_distance: z.string(),
  could_be_setprice: z.boolean(),
  short_label: z.string(),
  date_mode: z.string(),
  lead_id: z.number(),
  vehicle_services: z.unknown(),
  vehicle_condition: z.string(),
  vehicle_worth: z.number(),
  vehicle_mobility: z.string(),
  volume_units: z.string(),
  overall_weight_units: z.string(),
  overall_weight: z.number(),
  volume: z.number(),
  number_pallets: z.number(),
  additional_items: z.unknown(),
  packing_service_required: z.boolean(),
  destination_parking: z.string(),
  destination_property_elevator: z.boolean(),
  destination_number_floors: z.number(),
  destination_type_of_property: z.string(),
  origin_parking: z.string(),
  origin_property_elevator: z.boolean(),
  origin_number_floors: z.number(),
  origin_type_of_property: z.string(),
  customer_category: z.string(),
  transport_method: z.string(),
  is_delivery_same_as_pickup: z.boolean(),
  dist_localised: z.string(),
  render_expires: z.string(),
  render_delivery_date: z.string(),
  render_pickup_date: z.string(),
  flag: z.string(),
  tp_label: z.string(),
  listing_history: z.unknown(),
  image_ids: z.array(z.string()),
  originalEstimatedPrice: z.number(),
  currency_symbol: z.string(),
  is_frozen: z.boolean(),
  is_search_restricted: z.boolean(),
  version: z.number(),
  locale: z.string(),
  seo_slug: z.string(),
  title_signature: z.string(),
  title: z.string(),
  seo_duplicate: z.boolean(),
  seo_value: z.string(),
  relisting: z.boolean(),
  last_modified: z.string(),
  max_bid: z.number(),
  fee_waived: z.boolean(),
  promo_code: z.string(),
  urgent: z.boolean(),
  recommended_by: z.string(),
  featured_invoice_id: z.number(),
  featured_payment_id: z.number(),
  provider_archived: z.boolean(),
  archived: z.boolean(),
  bid_accepted_at: z.string(),
  expire_warn: z.boolean(),
  ebay_active: z.boolean(),
  ebay_expires: z.string(),
  ebay_seller_id: z.string(),
  ebay_item_id: z.string(),
  customer_feedback_requested_at: z.string(),
  customer_feedback_created_at: z.string(),
  customer_feedback_comment: z.string(),
  customer_feedback_score: z.number(),
  feedback_prompted: z.boolean(),
  feedback_created_at: z.string(),
  feedback_comment: z.string(),
  feedback_score: z.number(),
  winning_bid_id: z.number(),
  chosen_provider: z.number(),
  direction: z.string(),
  expires: z.string(),
  completed_at: z.string(),
  activated_at: z.string(),
  created_at: z.string(),
  sms_updates: z.boolean(),
  status: z.string(),
  lowest_bidder: z.number(),
  lowest_bid: z.number(),
  bid_count: z.number(),
  currency_id: z.number(),
  delivery_range: z.string(),
  pickup_range: z.string(),
  delivery_flexible: z.boolean(),
  pickup_flexible: z.boolean(),
  delivery_date_mode: z.string(),
  pickup_date_mode: z.string(),
  delivery_address: z.string(),
  pickup_address: z.string(),
  signature_label: z.string(),
  label: z.string(),
  label_for_customer: z.string(),
  admin_label: z.string(),
  admin_label_for_customer: z.string(),
  route_id: z.number(),
  classification: z.string(),
  user_id: z.number(),
  storage: z.boolean(),
  admin_marked_as_storage: z.boolean(),
  contactless_move: z.boolean(),
  category_subset: z.string(),
  is_ads_storage_granted: z.number(),
  pas_amount: z.number(),
  pas_pct: z.number(),
  pre_pickup_date: z.string(),
  tax_identification_number: z.string(),
  admin_difficult_requirements: z.string(),
  calendarLabels: z.unknown(),
  edit_type: z.string(),
  hash: z.string(),
  is_london: z.boolean(),
  pricesKeys: PricesKeysSchema,
  availableWindow: z.unknown(),
  estimated_loading_time: z.string(),
  estimated_unloading_time: z.string(),
  exp_bookings: z.number(),
  exp_pick_up_location: z.string(),
  pre_listing_credit: z.number(),
  start_property_type: z.string(),
  start_property_bedrooms: z.number(),
  start_floor: z.number(),
  start_lift: z.number(),
  end_property_type: z.string(),
  end_property_bedrooms: z.number(),
  end_floor: z.number(),
  end_lift: z.number(),
  premium: z.number(),
  is_standard_plus: z.number(),
  special_instructions: z.string(),
  lifetime_discount: z.boolean(),
  adjustment_service_enabled: z.boolean(),
  homesense: z.boolean(),
  affiliate_attribution_option: z.string(),
  parent_id: z.number(),
  stage_max: z.number(),
  currency: z.string(),
  parentHash: z.string(),
  isConvertedFromFurnitureToHouseMove: z.boolean(),
});

export const PrelistingSchema = z.object({
  listing: ListingSchema,
});
